/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/js/app.js":
/*!***********************!*\
  !*** ./src/js/app.js ***!
  \***********************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n// Burger icon menu\nconst iconMenu = document.querySelector('.menu__icon');\nconst menu = document.querySelector('.menu__body');\nif (iconMenu) {\n    iconMenu.addEventListener('click', function (e) {\n        iconMenu.classList.toggle('opened');\n        menu.classList.toggle('opened');\n    });\n}\n\n// Slider value\nvar slider = document.getElementById(\"range__input\");\nvar output = document.getElementById(\"range__value\");\noutput.innerHTML = slider.value + \"%\";\n\nslider.oninput = function () {\n    output.innerHTML = this.value + \"%\";\n}\n\n\n// Submitting form\nvar form = document.querySelector(\".order__form\");\nform.addEventListener('submit', function (e) {\n    e.preventDefault();\n    console.log('Submit form');\n    alert('Submit form');\n});\n\n\n// Select\nvar x, i, j, l, ll, selElmnt, a, b, c, img;\n/* Look for any elements with the class \"custom-select\": */\nx = document.querySelector(\".form__select\");\nl = x.length;\nselElmnt = x.getElementsByTagName(\"select\")[0];\nimg = x.querySelector(\".form__arrow\");\nll = selElmnt.length;\n/* For each element, create a new DIV that will act as the selected item: */\na = document.createElement(\"DIV\");\na.setAttribute(\"class\", \"select-selected\");\na.innerHTML = selElmnt.options[selElmnt.selectedIndex].innerHTML;\nx.appendChild(a);\n/* For each element, create a new DIV that will contain the option list: */\nb = document.createElement(\"DIV\");\nb.setAttribute(\"class\", \"select-items select-hide\");\nfor (j = 1; j < ll; j++) {\n    /* For each option in the original select element,\n    create a new DIV that will act as an option item: */\n    c = document.createElement(\"DIV\");\n    c.innerHTML = selElmnt.options[j].innerHTML;\n    c.addEventListener(\"click\", function (e) {\n        /* When an item is clicked, update the original select box,\n        and the selected item: */\n        var y, i, k, s, h, sl, yl;\n        s = this.parentNode.parentNode.getElementsByTagName(\"select\")[0];\n        sl = s.length;\n        h = this.parentNode.previousSibling;\n        for (i = 0; i < sl; i++) {\n            if (s.options[i].innerHTML == this.innerHTML) {\n                s.selectedIndex = i;\n                h.innerHTML = this.innerHTML;\n                y = this.parentNode.getElementsByClassName(\"same-as-selected\");\n                yl = y.length;\n                for (k = 0; k < yl; k++) {\n                    y[k].removeAttribute(\"class\");\n                }\n                this.setAttribute(\"class\", \"same-as-selected\");\n                break;\n            }\n        }\n        h.click();\n    });\n    b.appendChild(c);\n}\nx.appendChild(b);\na.addEventListener(\"click\", function (e) {\n    /* When the select box is clicked, close any other select boxes,\n    and open/close the current select box: */\n    e.stopPropagation();\n    closeAllSelect(this);\n    this.nextSibling.classList.toggle(\"select-hide\");\n    if (this.classList.contains(\"select-active\")) {\n        this.classList.remove(\"select-active\");\n        img.src = \"../img/order/arrow.svg\";\n    }\n    else {\n        this.classList.add(\"select-active\");\n        img.src = \"../img/order/arrow-reverse.svg\";\n    }\n});\n\n\nfunction closeAllSelect(elmnt) {\n    /* A function that will close all select boxes in the document,\n    except the current select box: */\n    var x, y, i, xl, yl, arrNo = [];\n    x = document.getElementsByClassName(\"select-items\");\n    y = document.getElementsByClassName(\"select-selected\");\n    xl = x.length;\n    yl = y.length;\n    for (i = 0; i < yl; i++) {\n        if (elmnt == y[i]) {\n            arrNo.push(i)\n        } else {\n            y[i].classList.remove(\"select-active\");\n        }\n    }\n    for (i = 0; i < xl; i++) {\n        if (arrNo.indexOf(i)) {\n            x[i].classList.add(\"select-hide\");\n        }\n    }\n}\n\n/* If the user clicks anywhere outside the select box,\nthen close all select boxes: */\ndocument.addEventListener(\"click\", closeAllSelect);\n\n\n//# sourceURL=webpack://gulp-bundle/./src/js/app.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/js/app.js"](0, __webpack_exports__, __webpack_require__);
/******/ 	
/******/ })()
;